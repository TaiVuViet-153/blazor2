@using Microsoft.AspNetCore.WebUtilities
@using System.Net.Http.Json
@using System.Threading.Tasks
@using System.Text.Json
@using System.Net.Http
@inject HttpClient _httpClient
@inject CryptoService _cryptoService
@inject NavigationManager _nav
@implements IDisposable

<div class="">
    <h3>Danh sách Crypto</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Ảnh</th>
                <th>Tên</th>
                <th>Giá Hiện Tại (USD)</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var crypto in _cryptoService.Cryptos)
            {
                @*
                @if(crypto.IsVisible)
                {
                    <tr>
                        <td><img src="@crypto.Image" alt="@crypto.Name" width="32" height="32" /></td>
                        <td>@crypto.Name</td>
                        <td>@crypto.Current_price</td>
                        <td><button class="btn btn-success" @onclick="() => AddToFavorite(crypto)" >Like</button></td>
                    </tr>
                }
                *@
                <tr>
                    <td><img src="@crypto.Image" alt="@crypto.Name" width="32" height="32" /></td>
                    <td>@crypto.Name</td>
                    <td>@crypto.Current_price</td>
                    @if(crypto.IsVisible) {
                        <td><button class="btn btn-success" @onclick="() => ToggleLikeStatus(crypto)" >Like</button></td>
                    } else {
                        <td><button class="btn btn-danger" @onclick="() => ToggleLikeStatus(crypto)" >DisLike</button></td>
                    }
                    
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    @* List<CryptoData> cryptos = new List<CryptoData>(); *@
    protected override async Task OnInitializedAsync()
    {
        @* cryptos = await GetCryptoDataAsync(); *@
        _cryptoService.Cryptos = await _httpClient.GetFromJsonAsync<List<CryptoData>>($"{_nav.BaseUri}/data/data-crypto.json");

        @* _cryptoService.Cryptos = await _cryptoService.GetCryptoDataAsync(); *@
        _cryptoService.OnChange += HadChangedState;
    }

    @* public async Task<List<CryptoData>> GetCryptoDataAsync()
    {
        // URL gốc của API
        var url = "https://api.coingecko.com/api/v3/coins/markets";

        // Các tham số query cần thiết cho API
        var parameters = new Dictionary<string, string>
        {
            { "vs_currency", "usd" },
            { "order", "market_cap_desc" },
            { "per_page", "50" },
            { "page", "1" },
            { "sparkline", "false" }
        };

        // Tạo URI hoàn chỉnh với query string
        var uri = QueryHelpers.AddQueryString(url, parameters);

        // Tạo yêu cầu HTTP và thêm header User-Agent
        var request = new HttpRequestMessage(HttpMethod.Get, uri);
        request.Headers.Add("User-Agent", "YourAppName/1.0"); // Thay YourAppName bằng tên app của bạn

        // Gửi yêu cầu và chờ phản hồi
        var response = await _httpClient.SendAsync(request);

        // Đảm bảo phản hồi thành công, nếu không sẽ ném ngoại lệ
        response.EnsureSuccessStatusCode();

        // Đọc và parse JSON trả về thành danh sách CryptoData
        return await response.Content.ReadFromJsonAsync<List<CryptoData>>();
    } *@

    @* public void AddToMyCryptos(CryptoData crypto) {
        var isExistedInMyCryptos = _cryptoService.MyCryptos.Find(c => c.Name == crypto.Name);
        var isExistedInCryptos = cryptos.Find(c => c.Name == crypto.Name);
        if(isExistedInMyCryptos == null && isExistedInCryptos != null) {
            isExistedInCryptos.IsVisible = false;
            _cryptoService.AddToMyCryptos(crypto);
        }
    } *@

    public void ToggleLikeStatus(CryptoData crypto) {
        var cryptoInMyList = _cryptoService.MyCryptos.Find(c => c.Name == crypto.Name);
        var cryptoInList = _cryptoService.Cryptos.Find(c => c.Name == crypto.Name);
        if(cryptoInList == null) return;
        
        if(cryptoInMyList == null)
            cryptoInList.IsVisible = false;
        else
            cryptoInList.IsVisible = true;

        _cryptoService.ToggleLikeStatus(cryptoInList);
    }

    public async void HadChangedState() {
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose() {
        _cryptoService.OnChange -= HadChangedState;
    }

}