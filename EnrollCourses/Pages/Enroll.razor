@page "/enroll-courses"
<PageTitle>Enroll Courses</PageTitle>

<div class="container">
    <h3 class="text-center text-primary">Enroll Courses Form</h3>
    <div class="row">
        <div class="col-6">
            <EditForm Model="@user" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                @* <ValidationSummary /> *@
                <div class="mb-3">
                    <label for="fullname" class="form-label">Full Name</label>
                    <input type="text" class="form-control" placeholder="Enter your full name..." id="fullname" @bind="@user.FullName"/>
                    <ValidationMessage For="@(() => user.FullName)"/>
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="text" class="form-control" placeholder="Enter your email..."
                    id="email" @bind="@user.Email"/>
                    <ValidationMessage For="@(() => user.Email)"/>
                </div>
                <div class="mb-3">
                    <label for="phone-number" class="form-label">Phone Number</label>
                    <input type="text" class="form-control" placeholder="Enter your phone number..." id="phone-number" @bind="@user.PhoneNumber"/>
                    <ValidationMessage For="@(() => user.PhoneNumber)"/>
                </div>
                <div class="mb-3">
                    <label for="courses" class="form-label">Courses</label>
                    <select class="form-control" id="courses" @bind="@user.SelectedCourse">
                        <option value="">--Please choose your course--</option>
                        @foreach (string item in courses) {
                            <option value="@item">@item</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => user.SelectedCourse)"/>
                </div>
                <div class="mb-3">
                    <label class="form-label">Learning Method</label>
                    <div class="row">
                        <label class="col-3">
                            <input type="radio" name="learning-method" value="true" checked="@user.LearningMethod.Equals(true)" @onchange="() => ChangeMethod(true)" />Online
                        </label>
                        <label class="col-3">
                            <input type="radio" name="learning-method" value="false" checked="@user.LearningMethod.Equals(false)" @onchange="() => ChangeMethod(false)" />Offline
                        </label>
                        <ValidationMessage For="@(() => user.LearningMethod)"/>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="start-date" class="form-label">Start Date</label>
                    <input id="start-date" type="date" class="form-control" @onchange="(e) => ChangeStartDate(e)" />
                    <ValidationMessage For="@(() => user.StartDate)"/>
                    <p class="text-danger" hidden="@isErrorStartDate">@startDateErrorMessage</p>
                </div>
                <div class="mb-3">
                    <label for="note" class="form-label">Note</label>
                    <textarea class="form-control" placeholder="Enter your note..." id="note" @bind="@user.Note"></textarea>
                </div>
                <div class="mb-3">
                    <div class="form-check">
                        <input id="terms" type="checkbox" class="form-check-input" checked="@user.IsAcceptTerms.Equals(true)" @onchange="(e) => ChangeAcceptTerms(e)"/>
                        <label for="terms" class="form-label">I agree to the terms and conditions</label>
                        <ValidationMessage For="@(() => user.IsAcceptTerms)"/>
                    </div>
                </div>
                <div class="mb-3">
                    <button class="btn btn-primary" disabled="@(!user.IsAcceptTerms)" @onclick="() => HandleSubmit()" >Submit</button>
                </div>
            </EditForm>
        </div>
        <div class="col-6">
            <h3>Show th√¥ng tin (Two-way binding)</h3>
            <p>Fullname: @user.FullName</p>
            <p>Email: @user.Email</p>
            <p>Phone Number: @user.PhoneNumber</p>
            <p>Course: @user.SelectedCourse</p>
            <p>Method: @(user.LearningMethod ? "Online" : "Offline")</p>
            <p>StartDate: @user.StartDate.ToString("dd/MM/yyyy")</p>
            <p>Note: @user.Note</p>
            <p>Accept Terms: @(user.IsAcceptTerms ? "Accept" : "Refuse")</p>
            @{
                if(isSubmitted) {
                    <h3>Submitted Information</h3>
                    <p>Fullname: @submittedUser.FullName</p>
                    <p>Email: @submittedUser.Email</p>
                    <p>Phone Number: @submittedUser.PhoneNumber</p>
                    <p>Course: @submittedUser.SelectedCourse</p>
                    <p>Method: @(submittedUser.LearningMethod ? "Online" : "Offline")</p>
                    <p>StartDate: @submittedUser.StartDate.ToString("dd/MM/yyyy")</p>
                    <p>Note: @submittedUser.Note</p>
                    <p>Accept Terms: @(submittedUser.IsAcceptTerms ? "Accept" : "Refuse")</p>

                }
            }
        </div>
    </div>
</div>

@code {
    private UserVM user = new UserVM();

    private UserVM submittedUser = new UserVM();
    private bool isSubmitted = false;

    private bool isErrorStartDate = true;
    private string startDateErrorMessage = "Start Date must be equal or after today";

    private List<string> courses = new List<string>
    {
        "Dotnet", "Python", "PHP", "Javascript", "ReactJS"
    };

    private void ChangeMethod(bool method) {
        user.LearningMethod = method;
    }

    private void ChangeStartDate(ChangeEventArgs e) {
        if(DateTime.TryParse(e.Value?.ToString(), out var selectedDate)) {
            user.StartDate = selectedDate;
            if(user.StartDate < DateTime.Today) {
                isErrorStartDate = false;
            } else {
                isErrorStartDate = true;
            }
        }
    }

    private void ChangeAcceptTerms(ChangeEventArgs e) {
        user.IsAcceptTerms = (bool)e.Value;
    }

    private void HandleSubmit() {
        submittedUser = user;
        isSubmitted = true;

        Console.WriteLine($"Fullname: {user.FullName}");
        Console.WriteLine($"Email: {user.Email}");
        Console.WriteLine($"Phone Number: {user.PhoneNumber}");
        Console.WriteLine($"Course: {user.SelectedCourse}");
        Console.WriteLine($"Method: {user.LearningMethod}");
        Console.WriteLine($"Note: {user.Note}");
        Console.WriteLine($"Terms: {user.IsAcceptTerms}");
    }
}